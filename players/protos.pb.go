// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos.proto

package players

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EntityType int32

const (
	PLAYER    EntityType = 0
	DOG       EntityType = 1
	CAT       EntityType = 2
	CROCODILE EntityType = 3
)

var EntityType_name = map[int32]string{
	0: "PLAYER",
	1: "DOG",
	2: "CAT",
	3: "CROCODILE",
}

var EntityType_value = map[string]int32{
	"PLAYER":    0,
	"DOG":       1,
	"CAT":       2,
	"CROCODILE": 3,
}

func (EntityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{0}
}

type CurrencyType int32

const (
	CREDITS CurrencyType = 0
	TICKETS CurrencyType = 1
	FILM    CurrencyType = 2
	PIXELS  CurrencyType = 3
	DUCKETS CurrencyType = 4
	RESPECT CurrencyType = 5
)

var CurrencyType_name = map[int32]string{
	0: "CREDITS",
	1: "TICKETS",
	2: "FILM",
	3: "PIXELS",
	4: "DUCKETS",
	5: "RESPECT",
}

var CurrencyType_value = map[string]int32{
	"CREDITS": 0,
	"TICKETS": 1,
	"FILM":    2,
	"PIXELS":  3,
	"DUCKETS": 4,
	"RESPECT": 5,
}

func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{1}
}

type HashingError int32

const (
	RESOURCES_EXHAUSTED HashingError = 0
	TOO_MANY_ATTEMPTS   HashingError = 1
)

var HashingError_name = map[int32]string{
	0: "RESOURCES_EXHAUSTED",
	1: "TOO_MANY_ATTEMPTS",
}

var HashingError_value = map[string]int32{
	"RESOURCES_EXHAUSTED": 0,
	"TOO_MANY_ATTEMPTS":   1,
}

func (HashingError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{2}
}

type NameError int32

const (
	TAKEN       NameError = 0
	NOT_ALLOWED NameError = 1
)

var NameError_name = map[int32]string{
	0: "TAKEN",
	1: "NOT_ALLOWED",
}

var NameError_value = map[string]int32{
	"TAKEN":       0,
	"NOT_ALLOWED": 1,
}

func (NameError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{3}
}

type LookRequest struct {
	Gender     string     `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	Figure     string     `protobuf:"bytes,2,opt,name=figure,proto3" json:"figure,omitempty"`
	EntityType EntityType `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3,enum=players.EntityType" json:"entity_type,omitempty"`
}

func (m *LookRequest) Reset()      { *m = LookRequest{} }
func (*LookRequest) ProtoMessage() {}
func (*LookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{0}
}
func (m *LookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookRequest.Merge(m, src)
}
func (m *LookRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookRequest proto.InternalMessageInfo

func (m *LookRequest) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *LookRequest) GetFigure() string {
	if m != nil {
		return m.Figure
	}
	return ""
}

func (m *LookRequest) GetEntityType() EntityType {
	if m != nil {
		return m.EntityType
	}
	return PLAYER
}

type LookResponse struct {
	NewGender string `protobuf:"bytes,1,opt,name=new_gender,json=newGender,proto3" json:"new_gender,omitempty"`
	NewFigure string `protobuf:"bytes,2,opt,name=new_figure,json=newFigure,proto3" json:"new_figure,omitempty"`
}

func (m *LookResponse) Reset()      { *m = LookResponse{} }
func (*LookResponse) ProtoMessage() {}
func (*LookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{1}
}
func (m *LookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookResponse.Merge(m, src)
}
func (m *LookResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookResponse proto.InternalMessageInfo

func (m *LookResponse) GetNewGender() string {
	if m != nil {
		return m.NewGender
	}
	return ""
}

func (m *LookResponse) GetNewFigure() string {
	if m != nil {
		return m.NewFigure
	}
	return ""
}

type MottoRequest struct {
	NewMotto string `protobuf:"bytes,1,opt,name=new_motto,json=newMotto,proto3" json:"new_motto,omitempty"`
}

func (m *MottoRequest) Reset()      { *m = MottoRequest{} }
func (*MottoRequest) ProtoMessage() {}
func (*MottoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{2}
}
func (m *MottoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MottoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MottoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MottoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MottoRequest.Merge(m, src)
}
func (m *MottoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MottoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MottoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MottoRequest proto.InternalMessageInfo

func (m *MottoRequest) GetNewMotto() string {
	if m != nil {
		return m.NewMotto
	}
	return ""
}

type MottoResponse struct {
	Successful bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	NewMotto   string `protobuf:"bytes,2,opt,name=new_motto,json=newMotto,proto3" json:"new_motto,omitempty"`
}

func (m *MottoResponse) Reset()      { *m = MottoResponse{} }
func (*MottoResponse) ProtoMessage() {}
func (*MottoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{3}
}
func (m *MottoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MottoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MottoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MottoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MottoResponse.Merge(m, src)
}
func (m *MottoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MottoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MottoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MottoResponse proto.InternalMessageInfo

func (m *MottoResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *MottoResponse) GetNewMotto() string {
	if m != nil {
		return m.NewMotto
	}
	return ""
}

type CurrencyRequest struct {
	Amount       uint32       `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyType CurrencyType `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3,enum=players.CurrencyType" json:"currency_type,omitempty"`
}

func (m *CurrencyRequest) Reset()      { *m = CurrencyRequest{} }
func (*CurrencyRequest) ProtoMessage() {}
func (*CurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{4}
}
func (m *CurrencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyRequest.Merge(m, src)
}
func (m *CurrencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyRequest proto.InternalMessageInfo

func (m *CurrencyRequest) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CurrencyRequest) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CREDITS
}

type CurrencyResponse struct {
	NewAmount    uint32       `protobuf:"varint,1,opt,name=new_amount,json=newAmount,proto3" json:"new_amount,omitempty"`
	CurrencyType CurrencyType `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3,enum=players.CurrencyType" json:"currency_type,omitempty"`
}

func (m *CurrencyResponse) Reset()      { *m = CurrencyResponse{} }
func (*CurrencyResponse) ProtoMessage() {}
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{5}
}
func (m *CurrencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyResponse.Merge(m, src)
}
func (m *CurrencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyResponse proto.InternalMessageInfo

func (m *CurrencyResponse) GetNewAmount() uint32 {
	if m != nil {
		return m.NewAmount
	}
	return 0
}

func (m *CurrencyResponse) GetCurrencyType() CurrencyType {
	if m != nil {
		return m.CurrencyType
	}
	return CREDITS
}

type PasswordResponse struct {
	Ok    bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error HashingError `protobuf:"varint,2,opt,name=error,proto3,enum=players.HashingError" json:"error,omitempty"`
}

func (m *PasswordResponse) Reset()      { *m = PasswordResponse{} }
func (*PasswordResponse) ProtoMessage() {}
func (*PasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{6}
}
func (m *PasswordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResponse.Merge(m, src)
}
func (m *PasswordResponse) XXX_Size() int {
	return m.Size()
}
func (m *PasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResponse proto.InternalMessageInfo

func (m *PasswordResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PasswordResponse) GetError() HashingError {
	if m != nil {
		return m.Error
	}
	return RESOURCES_EXHAUSTED
}

type CompareHashRequest struct {
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CompareHashRequest) Reset()      { *m = CompareHashRequest{} }
func (*CompareHashRequest) ProtoMessage() {}
func (*CompareHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{7}
}
func (m *CompareHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareHashRequest.Merge(m, src)
}
func (m *CompareHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompareHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompareHashRequest proto.InternalMessageInfo

func (m *CompareHashRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CompareHashResponse struct {
	Valid       bool         `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Error       HashingError `protobuf:"varint,2,opt,name=error,proto3,enum=players.HashingError" json:"error,omitempty"`
	NeedsRehash bool         `protobuf:"varint,3,opt,name=needs_rehash,json=needsRehash,proto3" json:"needs_rehash,omitempty"`
}

func (m *CompareHashResponse) Reset()      { *m = CompareHashResponse{} }
func (*CompareHashResponse) ProtoMessage() {}
func (*CompareHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{8}
}
func (m *CompareHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareHashResponse.Merge(m, src)
}
func (m *CompareHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompareHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompareHashResponse proto.InternalMessageInfo

func (m *CompareHashResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *CompareHashResponse) GetError() HashingError {
	if m != nil {
		return m.Error
	}
	return RESOURCES_EXHAUSTED
}

func (m *CompareHashResponse) GetNeedsRehash() bool {
	if m != nil {
		return m.NeedsRehash
	}
	return false
}

type NameRequest struct {
	NewName string `protobuf:"bytes,1,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (m *NameRequest) Reset()      { *m = NameRequest{} }
func (*NameRequest) ProtoMessage() {}
func (*NameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{9}
}
func (m *NameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRequest.Merge(m, src)
}
func (m *NameRequest) XXX_Size() int {
	return m.Size()
}
func (m *NameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameRequest proto.InternalMessageInfo

func (m *NameRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type NameResponse struct {
	Ok    bool      `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error NameError `protobuf:"varint,2,opt,name=error,proto3,enum=players.NameError" json:"error,omitempty"`
}

func (m *NameResponse) Reset()      { *m = NameResponse{} }
func (*NameResponse) ProtoMessage() {}
func (*NameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{10}
}
func (m *NameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResponse.Merge(m, src)
}
func (m *NameResponse) XXX_Size() int {
	return m.Size()
}
func (m *NameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NameResponse proto.InternalMessageInfo

func (m *NameResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *NameResponse) GetError() NameError {
	if m != nil {
		return m.Error
	}
	return TAKEN
}

type ChangePasswordRequest struct {
	CurrentPassword string `protobuf:"bytes,1,opt,name=current_password,json=currentPassword,proto3" json:"current_password,omitempty"`
	NewPassword     string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (m *ChangePasswordRequest) Reset()      { *m = ChangePasswordRequest{} }
func (*ChangePasswordRequest) ProtoMessage() {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da3cbeb884d181c, []int{11}
}
func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(m, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

func (m *ChangePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func init() {
	proto.RegisterEnum("players.EntityType", EntityType_name, EntityType_value)
	proto.RegisterEnum("players.CurrencyType", CurrencyType_name, CurrencyType_value)
	proto.RegisterEnum("players.HashingError", HashingError_name, HashingError_value)
	proto.RegisterEnum("players.NameError", NameError_name, NameError_value)
	proto.RegisterType((*LookRequest)(nil), "players.LookRequest")
	proto.RegisterType((*LookResponse)(nil), "players.LookResponse")
	proto.RegisterType((*MottoRequest)(nil), "players.MottoRequest")
	proto.RegisterType((*MottoResponse)(nil), "players.MottoResponse")
	proto.RegisterType((*CurrencyRequest)(nil), "players.CurrencyRequest")
	proto.RegisterType((*CurrencyResponse)(nil), "players.CurrencyResponse")
	proto.RegisterType((*PasswordResponse)(nil), "players.PasswordResponse")
	proto.RegisterType((*CompareHashRequest)(nil), "players.CompareHashRequest")
	proto.RegisterType((*CompareHashResponse)(nil), "players.CompareHashResponse")
	proto.RegisterType((*NameRequest)(nil), "players.NameRequest")
	proto.RegisterType((*NameResponse)(nil), "players.NameResponse")
	proto.RegisterType((*ChangePasswordRequest)(nil), "players.ChangePasswordRequest")
}

func init() { proto.RegisterFile("protos.proto", fileDescriptor_5da3cbeb884d181c) }

var fileDescriptor_5da3cbeb884d181c = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x8f, 0xda, 0x56,
	0x10, 0xb6, 0x21, 0xbb, 0x0b, 0x63, 0xb3, 0xfb, 0xfa, 0x36, 0xa4, 0x84, 0xb4, 0x56, 0xea, 0x4b,
	0x29, 0x91, 0x56, 0x55, 0x9a, 0x4b, 0x5b, 0x29, 0x92, 0x6b, 0x5e, 0xb2, 0x34, 0x06, 0x23, 0xe3,
	0x55, 0x37, 0x27, 0xcb, 0x85, 0x17, 0x40, 0xbb, 0xd8, 0xd4, 0x36, 0x45, 0xa8, 0x97, 0xfe, 0x84,
	0xfe, 0x8c, 0xfe, 0x94, 0x1e, 0xf7, 0x98, 0x63, 0x97, 0xbd, 0xf4, 0x18, 0xa9, 0x7f, 0xa0, 0x7a,
	0x7e, 0xb6, 0xb1, 0x21, 0x3d, 0x54, 0xcd, 0x09, 0xcf, 0xcc, 0x37, 0xf3, 0x8d, 0xbf, 0x19, 0x0f,
	0x20, 0x2f, 0x02, 0x3f, 0xf2, 0xc3, 0xb3, 0xf8, 0x07, 0x1f, 0x2d, 0xae, 0xdd, 0x35, 0x0d, 0x42,
	0x35, 0x04, 0xc9, 0xf0, 0xfd, 0x2b, 0x8b, 0xfe, 0xb4, 0xa4, 0x61, 0x84, 0x1f, 0xc0, 0xe1, 0x84,
	0x7a, 0x63, 0x1a, 0x34, 0xc4, 0xc7, 0x62, 0xab, 0x6a, 0x25, 0x16, 0xf3, 0xbf, 0x99, 0x4d, 0x96,
	0x01, 0x6d, 0x94, 0xb8, 0x9f, 0x5b, 0xf8, 0x19, 0x48, 0xd4, 0x8b, 0x66, 0xd1, 0xda, 0x89, 0xd6,
	0x0b, 0xda, 0x28, 0x3f, 0x16, 0x5b, 0xc7, 0x4f, 0x4f, 0xcf, 0x92, 0xea, 0x67, 0x24, 0x8e, 0xd9,
	0xeb, 0x05, 0xb5, 0x80, 0x66, 0xcf, 0xaa, 0x01, 0x32, 0x27, 0x0d, 0x17, 0xbe, 0x17, 0x52, 0xfc,
	0x29, 0x80, 0x47, 0x57, 0x4e, 0x81, 0xb9, 0xea, 0xd1, 0xd5, 0x4b, 0x4e, 0x9e, 0x84, 0x0b, 0x0d,
	0xb0, 0xf0, 0x8b, 0xd8, 0xa1, 0x3e, 0x01, 0xb9, 0xe7, 0x47, 0x91, 0x9f, 0xbe, 0xc3, 0x23, 0x60,
	0x41, 0x67, 0xce, 0x7c, 0x49, 0xb1, 0x8a, 0x47, 0x57, 0x31, 0x46, 0x35, 0xa0, 0x96, 0x80, 0x13,
	0x6e, 0x05, 0x20, 0x5c, 0x8e, 0x46, 0x34, 0x0c, 0xdf, 0x2c, 0xaf, 0x63, 0x78, 0xc5, 0xca, 0x79,
	0x8a, 0xd5, 0x4a, 0x3b, 0xd5, 0x28, 0x9c, 0xe8, 0xcb, 0x20, 0xa0, 0xde, 0x68, 0x9d, 0x53, 0xd0,
	0x9d, 0xfb, 0x4b, 0x2f, 0x8a, 0x6b, 0xd5, 0xac, 0xc4, 0xc2, 0xdf, 0x40, 0x6d, 0x94, 0x40, 0xb9,
	0x56, 0xa5, 0x58, 0xab, 0x7a, 0xa6, 0x55, 0x5a, 0x28, 0x56, 0x4b, 0x1e, 0xe5, 0x2c, 0x75, 0x0e,
	0x68, 0x4b, 0x53, 0xd4, 0xac, 0xc0, 0xc5, 0x3a, 0xd5, 0xfe, 0x3f, 0x9d, 0x09, 0x68, 0xe0, 0x86,
	0xe1, 0xca, 0x0f, 0xc6, 0x19, 0xdd, 0x31, 0x94, 0xfc, 0xab, 0x44, 0x9e, 0x92, 0x7f, 0x85, 0x9f,
	0xc0, 0x01, 0x0d, 0x02, 0x3f, 0xd8, 0xab, 0x7b, 0xee, 0x86, 0xd3, 0x99, 0x37, 0x21, 0x2c, 0x68,
	0x71, 0x8c, 0xfa, 0x25, 0x60, 0xdd, 0x9f, 0x2f, 0xdc, 0x80, 0xb2, 0x68, 0xaa, 0x54, 0x13, 0x2a,
	0x8b, 0x84, 0x26, 0x1d, 0x53, 0x6a, 0xab, 0xbf, 0xc0, 0x69, 0x21, 0x23, 0xe9, 0xe2, 0x3e, 0x1c,
	0xfc, 0xec, 0x5e, 0xcf, 0xc6, 0x49, 0x23, 0xdc, 0xf8, 0x4f, 0xbd, 0xe0, 0xcf, 0x40, 0xf6, 0x28,
	0x1d, 0x87, 0x4e, 0x40, 0xa7, 0x6e, 0x38, 0x8d, 0x57, 0xb6, 0x62, 0x49, 0xb1, 0xcf, 0x8a, 0x5d,
	0x6a, 0x0b, 0xa4, 0xbe, 0x3b, 0xa7, 0x69, 0x9f, 0x0f, 0x81, 0x0d, 0xdc, 0xf1, 0xdc, 0x39, 0x4d,
	0xfa, 0x3c, 0xf2, 0xe8, 0x8a, 0x21, 0xd4, 0x73, 0x90, 0x39, 0xf2, 0x5f, 0x54, 0x6a, 0x15, 0x3b,
	0xc3, 0x59, 0x67, 0x2c, 0xab, 0x20, 0x11, 0x85, 0xba, 0x3e, 0x75, 0xbd, 0x09, 0xdd, 0x2a, 0xcf,
	0xd9, 0xbf, 0x00, 0xc4, 0x87, 0x13, 0x39, 0x3b, 0x6a, 0x9d, 0x24, 0xfe, 0x34, 0x83, 0xbf, 0xda,
	0x6a, 0x0b, 0xe3, 0xdb, 0x2a, 0x79, 0x74, 0x95, 0x42, 0xda, 0x5f, 0x03, 0x6c, 0xbf, 0x49, 0x0c,
	0x70, 0x38, 0x30, 0xb4, 0xd7, 0xc4, 0x42, 0x02, 0x3e, 0x82, 0x72, 0xc7, 0x7c, 0x89, 0x44, 0xf6,
	0xa0, 0x6b, 0x36, 0x2a, 0xe1, 0x1a, 0x54, 0x75, 0xcb, 0xd4, 0xcd, 0x4e, 0xd7, 0x20, 0xa8, 0xdc,
	0xbe, 0x04, 0x39, 0xbf, 0x33, 0x58, 0x82, 0x23, 0xdd, 0x22, 0x9d, 0xae, 0x3d, 0x44, 0x02, 0x33,
	0xec, 0xae, 0xfe, 0x8a, 0xd8, 0x43, 0x24, 0xe2, 0x0a, 0xdc, 0x7b, 0xd1, 0x35, 0x7a, 0xa8, 0x14,
	0x13, 0x74, 0x2f, 0x89, 0x31, 0x44, 0x65, 0x06, 0xe9, 0x5c, 0x70, 0xc8, 0x3d, 0x66, 0x58, 0x64,
	0x38, 0x20, 0xba, 0x8d, 0x0e, 0xda, 0xcf, 0x41, 0xce, 0x4f, 0x0a, 0x7f, 0x0c, 0xa7, 0x16, 0x19,
	0x9a, 0x17, 0x96, 0x4e, 0x86, 0x0e, 0xb9, 0x3c, 0xd7, 0x2e, 0x86, 0x36, 0xe9, 0x20, 0x01, 0xd7,
	0xe1, 0x23, 0xdb, 0x34, 0x9d, 0x9e, 0xd6, 0x7f, 0xed, 0x68, 0xb6, 0x4d, 0x7a, 0x03, 0xc6, 0xd7,
	0xfe, 0x1c, 0xaa, 0x99, 0x9e, 0xb8, 0x0a, 0x07, 0xb6, 0xf6, 0x8a, 0xf4, 0x91, 0x80, 0x4f, 0x40,
	0xea, 0x9b, 0xb6, 0xa3, 0x19, 0x86, 0xf9, 0x03, 0xe9, 0x20, 0xf1, 0xe9, 0xdf, 0x65, 0x38, 0x1c,
	0xc4, 0x13, 0xc0, 0xdf, 0x83, 0x94, 0x5b, 0x30, 0xfc, 0x68, 0xfb, 0x5d, 0xec, 0x2d, 0x6a, 0xf3,
	0x93, 0xf7, 0x07, 0xf9, 0xcc, 0x55, 0x01, 0x7f, 0x0b, 0xc0, 0x67, 0xc7, 0x8e, 0x1a, 0xbe, 0x9f,
	0xa1, 0x73, 0x87, 0xb5, 0x59, 0xdf, 0xf1, 0xee, 0x27, 0xb3, 0x57, 0xc8, 0x25, 0xe7, 0x36, 0x30,
	0x97, 0x9c, 0xdf, 0x36, 0x55, 0xc0, 0x3d, 0x38, 0x2e, 0x6e, 0x0d, 0x56, 0xb6, 0xbd, 0xbe, 0x6f,
	0x9d, 0x9a, 0x0f, 0xb3, 0xf8, 0xee, 0x27, 0xae, 0x0a, 0xf8, 0x39, 0x48, 0x3c, 0x2b, 0xbe, 0x6e,
	0x78, 0x4b, 0x9b, 0xbf, 0xaf, 0xcd, 0x07, 0xbb, 0xee, 0x2c, 0xbf, 0x0b, 0xa8, 0xeb, 0x8d, 0x02,
	0xea, 0x86, 0x34, 0x5d, 0x15, 0xdc, 0xd8, 0xbb, 0x38, 0xfb, 0xad, 0xec, 0x1e, 0x37, 0x5e, 0xaa,
	0x43, 0x3f, 0x48, 0xa9, 0xef, 0x9e, 0xdd, 0xdc, 0x2a, 0xc2, 0xdb, 0x5b, 0x45, 0x78, 0x77, 0xab,
	0x88, 0xbf, 0x6e, 0x14, 0xf1, 0xf7, 0x8d, 0x22, 0xfe, 0xb1, 0x51, 0xc4, 0x9b, 0x8d, 0x22, 0xfe,
	0xb9, 0x51, 0xc4, 0xbf, 0x36, 0x8a, 0xf0, 0x6e, 0xa3, 0x88, 0xbf, 0xdd, 0x29, 0xc2, 0xcd, 0x9d,
	0x22, 0xbc, 0xbd, 0x53, 0x84, 0x1f, 0x0f, 0xe3, 0x3f, 0xca, 0xaf, 0xfe, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xa1, 0xc5, 0x6b, 0x1e, 0x38, 0x07, 0x00, 0x00,
}

func (x EntityType) String() string {
	s, ok := EntityType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CurrencyType) String() string {
	s, ok := CurrencyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HashingError) String() string {
	s, ok := HashingError_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NameError) String() string {
	s, ok := NameError_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LookRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookRequest)
	if !ok {
		that2, ok := that.(LookRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Figure != that1.Figure {
		return false
	}
	if this.EntityType != that1.EntityType {
		return false
	}
	return true
}
func (this *LookResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookResponse)
	if !ok {
		that2, ok := that.(LookResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewGender != that1.NewGender {
		return false
	}
	if this.NewFigure != that1.NewFigure {
		return false
	}
	return true
}
func (this *MottoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MottoRequest)
	if !ok {
		that2, ok := that.(MottoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewMotto != that1.NewMotto {
		return false
	}
	return true
}
func (this *MottoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MottoResponse)
	if !ok {
		that2, ok := that.(MottoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	if this.NewMotto != that1.NewMotto {
		return false
	}
	return true
}
func (this *CurrencyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurrencyRequest)
	if !ok {
		that2, ok := that.(CurrencyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.CurrencyType != that1.CurrencyType {
		return false
	}
	return true
}
func (this *CurrencyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurrencyResponse)
	if !ok {
		that2, ok := that.(CurrencyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewAmount != that1.NewAmount {
		return false
	}
	if this.CurrencyType != that1.CurrencyType {
		return false
	}
	return true
}
func (this *PasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResponse)
	if !ok {
		that2, ok := that.(PasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CompareHashRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareHashRequest)
	if !ok {
		that2, ok := that.(CompareHashRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *CompareHashResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareHashResponse)
	if !ok {
		that2, ok := that.(CompareHashResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Valid != that1.Valid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.NeedsRehash != that1.NeedsRehash {
		return false
	}
	return true
}
func (this *NameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameRequest)
	if !ok {
		that2, ok := that.(NameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewName != that1.NewName {
		return false
	}
	return true
}
func (this *NameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameResponse)
	if !ok {
		that2, ok := that.(NameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *ChangePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordRequest)
	if !ok {
		that2, ok := that.(ChangePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentPassword != that1.CurrentPassword {
		return false
	}
	if this.NewPassword != that1.NewPassword {
		return false
	}
	return true
}
func (this *LookRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&players.LookRequest{")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "Figure: "+fmt.Sprintf("%#v", this.Figure)+",\n")
	s = append(s, "EntityType: "+fmt.Sprintf("%#v", this.EntityType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.LookResponse{")
	s = append(s, "NewGender: "+fmt.Sprintf("%#v", this.NewGender)+",\n")
	s = append(s, "NewFigure: "+fmt.Sprintf("%#v", this.NewFigure)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MottoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&players.MottoRequest{")
	s = append(s, "NewMotto: "+fmt.Sprintf("%#v", this.NewMotto)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MottoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.MottoResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "NewMotto: "+fmt.Sprintf("%#v", this.NewMotto)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CurrencyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.CurrencyRequest{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "CurrencyType: "+fmt.Sprintf("%#v", this.CurrencyType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CurrencyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.CurrencyResponse{")
	s = append(s, "NewAmount: "+fmt.Sprintf("%#v", this.NewAmount)+",\n")
	s = append(s, "CurrencyType: "+fmt.Sprintf("%#v", this.CurrencyType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.PasswordResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareHashRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&players.CompareHashRequest{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareHashResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&players.CompareHashResponse{")
	s = append(s, "Valid: "+fmt.Sprintf("%#v", this.Valid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "NeedsRehash: "+fmt.Sprintf("%#v", this.NeedsRehash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&players.NameRequest{")
	s = append(s, "NewName: "+fmt.Sprintf("%#v", this.NewName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.NameResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&players.ChangePasswordRequest{")
	s = append(s, "CurrentPassword: "+fmt.Sprintf("%#v", this.CurrentPassword)+",\n")
	s = append(s, "NewPassword: "+fmt.Sprintf("%#v", this.NewPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtos(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Figure) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Figure)))
		i += copy(dAtA[i:], m.Figure)
	}
	if m.EntityType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.EntityType))
	}
	return i, nil
}

func (m *LookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewGender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewGender)))
		i += copy(dAtA[i:], m.NewGender)
	}
	if len(m.NewFigure) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewFigure)))
		i += copy(dAtA[i:], m.NewFigure)
	}
	return i, nil
}

func (m *MottoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MottoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewMotto) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewMotto)))
		i += copy(dAtA[i:], m.NewMotto)
	}
	return i, nil
}

func (m *MottoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MottoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Successful {
		dAtA[i] = 0x8
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NewMotto) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewMotto)))
		i += copy(dAtA[i:], m.NewMotto)
	}
	return i, nil
}

func (m *CurrencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Amount))
	}
	if m.CurrencyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.CurrencyType))
	}
	return i, nil
}

func (m *CurrencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.NewAmount))
	}
	if m.CurrencyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.CurrencyType))
	}
	return i, nil
}

func (m *PasswordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CompareHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareHashRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *CompareHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareHashResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Error))
	}
	if m.NeedsRehash {
		dAtA[i] = 0x18
		i++
		if m.NeedsRehash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	return i, nil
}

func (m *NameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ChangePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentPassword) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.CurrentPassword)))
		i += copy(dAtA[i:], m.CurrentPassword)
	}
	if len(m.NewPassword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.NewPassword)))
		i += copy(dAtA[i:], m.NewPassword)
	}
	return i, nil
}

func encodeVarintProtos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Figure)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.EntityType != 0 {
		n += 1 + sovProtos(uint64(m.EntityType))
	}
	return n
}

func (m *LookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewGender)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.NewFigure)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *MottoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewMotto)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *MottoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	l = len(m.NewMotto)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *CurrencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovProtos(uint64(m.Amount))
	}
	if m.CurrencyType != 0 {
		n += 1 + sovProtos(uint64(m.CurrencyType))
	}
	return n
}

func (m *CurrencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAmount != 0 {
		n += 1 + sovProtos(uint64(m.NewAmount))
	}
	if m.CurrencyType != 0 {
		n += 1 + sovProtos(uint64(m.CurrencyType))
	}
	return n
}

func (m *PasswordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovProtos(uint64(m.Error))
	}
	return n
}

func (m *CompareHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *CompareHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovProtos(uint64(m.Error))
	}
	if m.NeedsRehash {
		n += 2
	}
	return n
}

func (m *NameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *NameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovProtos(uint64(m.Error))
	}
	return n
}

func (m *ChangePasswordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentPassword)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func sovProtos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtos(x uint64) (n int) {
	return sovProtos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LookRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookRequest{`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Figure:` + fmt.Sprintf("%v", this.Figure) + `,`,
		`EntityType:` + fmt.Sprintf("%v", this.EntityType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookResponse{`,
		`NewGender:` + fmt.Sprintf("%v", this.NewGender) + `,`,
		`NewFigure:` + fmt.Sprintf("%v", this.NewFigure) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MottoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MottoRequest{`,
		`NewMotto:` + fmt.Sprintf("%v", this.NewMotto) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MottoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MottoResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`NewMotto:` + fmt.Sprintf("%v", this.NewMotto) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CurrencyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CurrencyRequest{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`CurrencyType:` + fmt.Sprintf("%v", this.CurrencyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CurrencyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CurrencyResponse{`,
		`NewAmount:` + fmt.Sprintf("%v", this.NewAmount) + `,`,
		`CurrencyType:` + fmt.Sprintf("%v", this.CurrencyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareHashRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareHashRequest{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareHashResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareHashResponse{`,
		`Valid:` + fmt.Sprintf("%v", this.Valid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`NeedsRehash:` + fmt.Sprintf("%v", this.NeedsRehash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameRequest{`,
		`NewName:` + fmt.Sprintf("%v", this.NewName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordRequest{`,
		`CurrentPassword:` + fmt.Sprintf("%v", this.CurrentPassword) + `,`,
		`NewPassword:` + fmt.Sprintf("%v", this.NewPassword) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtos(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Figure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Figure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			m.EntityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityType |= EntityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewGender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFigure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFigure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MottoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MottoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MottoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMotto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMotto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MottoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MottoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MottoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMotto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMotto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyType", wireType)
			}
			m.CurrencyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyType |= CurrencyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAmount", wireType)
			}
			m.NewAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAmount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyType", wireType)
			}
			m.CurrencyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyType |= CurrencyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= HashingError(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= HashingError(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsRehash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsRehash = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= NameError(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtos
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtos
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtos   = fmt.Errorf("proto: integer overflow")
)
